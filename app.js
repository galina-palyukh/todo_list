document.addEventListener("DOMContentLoaded", function () {    const body = document.querySelector("body");    const table = document.querySelector(".table-todo");    const tableHead = document.querySelector(".table-todo thead");    const tableBody = document.querySelector(".table-todo tbody");    const addBtn = document.querySelector(".box-add__btn");    const addInput = document.querySelector(".box-add__field");    const filterOptions = document.querySelector(".select-sort-task");    const commonInputStatus = document.querySelector(".table-todo__status-common-input");    const btnRemoveAllTasks = document.querySelector(".todo-header__btn-remove-all");    //localStorage    let taskCommonStatus = JSON.parse((localStorage.getItem("taskCommonStatusKey")) || false);    let dynamicDateArr = JSON.parse(localStorage.getItem("rowsKey")) || [];    //END localStorage    if (dynamicDateArr.length !== 0) {        table.style.display = "table";    }    dynamicDateArr.forEach(el => addTableRow(el));    // for (let i = 0; i < dynamicDateArr.length; i++) {    //     addTableRow(dynamicDateArr[i]);    //    // }    let defineSortingByText = true;    let defineSortingByDate = true;    tableHead.addEventListener("click", function (e) {        const el = e.target;        const type = el.getAttribute("datatype");        if (el.nodeName !== "TH" || type === null) return;        const index = el.cellIndex;        sortTable(index,type);    });    function sortTable(indexVariable,typeVariable) {        if(typeVariable === "text"){            if (defineSortingByText) {                dynamicDateArr.sort ((a, b) => a.title.localeCompare(b.title));                defineSortingByText = false;            } else {                dynamicDateArr.sort ((a, b) => b.title.localeCompare(a.title));                defineSortingByText = true;            }        } else if(typeVariable === "date"){            if (defineSortingByDate) {                dynamicDateArr.sort ((a, b) => fromDateAndTimeToMilliseconds(a.date) - fromDateAndTimeToMilliseconds(b.date));                defineSortingByDate = false;            }            else {                dynamicDateArr.sort ((a, b) => fromDateAndTimeToMilliseconds(b.date) - fromDateAndTimeToMilliseconds(a.date));                defineSortingByDate = true;            }        }        localStorage.setItem("rowsKey", JSON.stringify(dynamicDateArr));        [...tableBody.childNodes].forEach(el => el.remove());        dynamicDateArr.forEach(el => addTableRow(el));    }    addBtn.addEventListener("click", onclickAddTaskButton);    addInput.addEventListener("keypress", function (keyEvent) {        if (keyEvent.key === "Enter") {            onclickAddTaskButton();        }    });    filterOptions.addEventListener("change", filterTasks);    function filterTasks() {        let rows = [...tableBody.querySelectorAll("tr")];        if (this.value === "completed") {            rows.forEach(el => {                el.classList.contains("_done") ? el.style.display = "table-row" : el.style.display = "none";            })        } else if (this.value === "active") {            rows.forEach(el => {                el.classList.contains("_done") ? el.style.display = "none" : el.style.display = "table-row"            });        } else {            rows.filter(el => el.style.display = "none").forEach(el => el.style.display = "table-row");        }    }    btnRemoveAllTasks.addEventListener("click", removeAllTasks);    function removeAllTasks() {        let rows = tableBody.querySelectorAll(".table-todo__row");        for (const tr of rows) {            tr.remove();        }        dynamicDateArr.length = 0;        localStorage.setItem("rowsKey", JSON.stringify(dynamicDateArr));        table.style.display = "none";    }    function addTableRow(rowVariable) {        let row = document.createElement("tr");        row.classList.add("table-todo__row");        tableBody.appendChild(row);        let cellStatus = document.createElement("td");        cellStatus.classList.add("table-todo__cell");        row.appendChild(cellStatus);        let boxStatus = document.createElement("div");        boxStatus.classList.add("table-todo__status");        cellStatus.appendChild(boxStatus);        let inputStatus = document.createElement("input");        inputStatus.classList.add("table-todo__status-input");        boxStatus.appendChild(inputStatus);        inputStatus.setAttribute("type", "checkbox");        inputStatus.checked = rowVariable.status;        inputStatus.addEventListener("change", doneTask);        if (rowVariable.status === true) row.classList.add("_done");        //for common checkbox status        commonInputStatus.checked = taskCommonStatus;        //end for common checkbox status        let cellTitle = document.createElement("td");        cellTitle.classList.add("table-todo__cell");        row.appendChild(cellTitle);        let boxTitle = document.createElement("div");        boxTitle.classList.add("table-todo__title");        cellTitle.appendChild(boxTitle);        boxTitle.innerText = rowVariable.title;        let cellDate = document.createElement("td");        cellDate.classList.add("table-todo__cell");        row.appendChild(cellDate);        let boxDate = document.createElement("div");        boxDate.classList.add("table-todo__date");        cellDate.appendChild(boxDate);        boxDate.textContent = rowVariable.date;        let actions = document.createElement("td");        actions.classList.add("table-todo__cell");        actions.innerHTML = '<div class="table-todo__actions"><a href ="#" class="table-todo__btn table-todo__btn-remove"><i class="fa-solid fa-trash"></i></a><a href ="#" class="table-todo__btn table-todo__btn-edit"><i class="fa-solid fa-pen-to-square"></i></a></div>';        row.appendChild(actions);        let removeBtn = actions.querySelector(".table-todo__btn-remove");        removeBtn.addEventListener("click", removeTask);        let editBtn = actions.querySelector(".table-todo__btn-edit");        editBtn.addEventListener("click", editTask);    }    function onclickAddTaskButton(e) {        if (e) {            e.preventDefault();        }        let value = addInput.value.trim();        let optionsDate = {            year: 'numeric',            month: '2-digit',            day: '2-digit'        };        let dateString = new Date().toLocaleDateString("en-GB", optionsDate);        let timeString = new Date().toLocaleTimeString("en-GB");        let date = dateString + " " + timeString;        let status = false;        if (value !== "") {            if (table.style.display !== "table") {                table.style.display = "table";            }            let rowObj = {                status: status,                title: value,                date: date,            };            addTableRow(rowObj);            filterTasks.call(filterOptions);            commonInputStatus.checked = false;            taskCommonStatus = false;            localStorage.setItem('taskCommonStatusKey', JSON.stringify(taskCommonStatus));            dynamicDateArr.push(rowObj);            localStorage.setItem('rowsKey', JSON.stringify(dynamicDateArr));            document.querySelector(".box-add__field").value = " ";        }    }    function doneTask(e) {        let row = this.closest("tr");        this.checked === true ? row.classList.add("_done") : row.classList.remove("_done");        let indexRow = [...tableBody.childNodes].indexOf(row);        dynamicDateArr[indexRow].status = this.checked;        if (dynamicDateArr.some(el => el.status === false)) {            commonInputStatus.checked = false;            taskCommonStatus = false;        } else if (dynamicDateArr.every(el => el.status === true)) {            commonInputStatus.checked = true;            taskCommonStatus = true;        }        localStorage.setItem('taskCommonStatusKey', JSON.stringify(taskCommonStatus));        localStorage.setItem('rowsKey', JSON.stringify(dynamicDateArr));    }    function removeTask(e) {        e.preventDefault();        let row = this.closest("tr");        let rowsList = tableBody.childNodes;        let indexRow = [...rowsList].indexOf(row);        row.remove();        dynamicDateArr.splice(indexRow, 1);        localStorage.setItem("rowsKey", JSON.stringify(dynamicDateArr));        if ([...rowsList].every(el => el.classList.contains('_done'))) {            commonInputStatus.checked = true;            taskCommonStatus = true;        }        localStorage.setItem("taskCommonStatusKey", JSON.parse(taskCommonStatus));        if (dynamicDateArr.length === 0) {            table.style.display = "none";        }    }    let popupEdit = document.querySelector(".edit-task-popup");    let editPopupBtnSubmit = document.querySelector(".edit-task-popup__btn-submit");    let editPopupBtnCancel = document.querySelector(".edit-task-popup__btn-cancel");    let editPopupBtnClose = document.querySelector(".edit-task-popup__btn-close");    let editPopupField = document.querySelector(".edit-task-popup__field");    let editPopupOverlay = document.querySelector(".edit-task-popup .popup__overlay");    let editButtonClicked;    function editTask(e) {        e.preventDefault();        editButtonClicked = this;        let row = editButtonClicked.closest("tr");        let title = row.querySelector(".table-todo__title").innerHTML;        openEditPopup(title);    }    editPopupBtnSubmit.addEventListener("click", editTaskSaveState);    editPopupField.addEventListener("keypress", (e) => {        if (e.key === "Enter") {            editTaskSaveState();        }    });    function editTaskSaveState() {        let row = editButtonClicked.closest("tr");        let rowsList = tableBody.childNodes;        let indexRow = [...rowsList].indexOf(row);        dynamicDateArr[indexRow].title = editPopupField.value;        row.querySelector(".table-todo__title").innerHTML = editPopupField.value;        localStorage.setItem("rowsKey", JSON.stringify(dynamicDateArr));        closeEditPopup();    }    editPopupBtnCancel.addEventListener("click", closeEditPopup);    editPopupBtnClose.addEventListener("click", closeEditPopup);    function openEditPopup(title) {        popupEdit.classList.add("_open");        body.style.overflowY = "hidden";        editPopupField.value = title;        body.style.paddingRight = "15px";    }    function closeEditPopup() {        popupEdit.classList.remove("_open");        body.style.overflowY = "auto";        body.style.paddingRight = null;    }    editPopupOverlay.addEventListener("click", closeEditPopup);    // for all checkboxes    commonInputStatus.addEventListener("click", () => {        let rowsList = [...tableBody.childNodes];        if (commonInputStatus.checked === true) {            rowsList.filter(el => !el.classList.contains("_done")).forEach((el) => {                el.querySelector(".table-todo__status input").checked = true;                el.classList.add("_done");                let indexRow = rowsList.indexOf(el);                dynamicDateArr[indexRow].status = true;                taskCommonStatus = true;            })        } else {            rowsList.filter(el => el.classList.contains("_done")).forEach((el, i) => {                el.querySelector(".table-todo__status input").checked = false;                el.classList.remove("_done");                let indexRow = rowsList.indexOf(el);                dynamicDateArr[indexRow].status = false;                taskCommonStatus = false;            });        }        localStorage.setItem("rowsKey", JSON.stringify(dynamicDateArr));        localStorage.setItem("taskCommonStatusKey", JSON.stringify(taskCommonStatus));    });    function fromDateAndTimeToMilliseconds (date) {        const dateArr = date.split(" "); // ['04/09/2023', '12:39:46'] Разбить строку на дату и время        const datePartsArr = dateArr[0].split("/"); // ['04', '09', '2023'] Разбить дату на день, месяц и год        const timePartsArr = dateArr[1].split(":"); // ['12', '39', '46']  Разбить время на часы, минуты и секунды        date = new Date(datePartsArr[2],datePartsArr[1]-1, datePartsArr[0], timePartsArr[0], timePartsArr[1], timePartsArr[2]);        return date.getTime();    }});